|UI-автоматизация Part 1:|
|////////////////////////|

------------------------------------------------------------- Место автоматизированного UI-тестирования в ходе проекта -------------------------------------------------------------

нужна автоматизация тестирования, если:

* У вас проект длительностью в год или больше. Количество тестов,
которые нужно прогонять в рамках регрессии, стремительно растет,
а рутину нужно искоренять в первую очередь. Тестировщики должны
тестировать, а не проходить тест-кейсы.

* У вас распределенная команда разработки либо в команде больше
двух разработчиков. Разработчик должен быть уверен, что его
изменения не сломают чужой код. Без авто-тестов он узнает об
этом в лучшем случае через день-два, в худшем — от пользователей.

* Вы поддерживаете несколько версий продукта и выпускаете патчи
и сервиспаки под каждую из них. Тут все очевидно: тестирование
на разных конфигурациях — это рутина, а рутину надо искоренять.

* Вы разрабатываете сервис, основная задача которого — обработка
и трансформация всевозможных данных. Заниматься ручным вбиванием
в систему данных и визуальным анализом результатов или отправкой
запросов и анализом ответов — это вообще не то, чем должны
заниматься живые люди каждый день.

* У вас аджайл с короткими итерациями и частыми релизами.
Времени на ручной прогон регрессии в рамках спринта катастрофически
нет, а знать, что всё в порядке в тех местах, куда не
лазили тестировщики, необходимо.

Основные плюсы UI тестирования:

Покрывает большую часть пользовательских действий и позволяет, со стороны юзера, потрогать приложение.
Проверяет взаимодействие компонентов и сервисов между собой.
Увеличивает надежность приложения.

Основные минусы UI тестирования:

Огромное, иногда — невероятно огромное, количество времени, потраченного на mock всех компонентов и сервисов (впрочем, как и в Unit тестах).
Мало применимо для маленьких по размеру приложений, поскольку овчинка выделки не стоит.
Сами тесты гоняются дольше, чем Unit, из-за сложности используемых сервисов.
Более сложный процесс автоматизации и интеграции в pipeline (на Jenkins, Travis, etc.)
Нестабильность.

Статья про нестабильность UI тестов:
http://qa-blog.alexei-vinogradov.de/2016/10/почему-нестабильны-ui-тесты-а-на-самом-д/

Возьмём для примера довольно типичный для данной категории автоматизированный тест,
использующий библиотеку основанную на фреймворке Selenium WebDriver.
Запуск данного теста затрагивает, помимо нескольких слоёв самого приложения также:
браузер, драйвер браузера (WebDriver),  (core) библиотеку Selenium, кастомную библиотеку,
основанную на Seleniume (Selenide, JDI, Protractor, ваш собственный велосипед)
ну и собственно код вашего теста (см. рисунок), причем неоднократно.Untitled_3

Проблема в том, что каждый из этих слоёв пирога - софт, а в софте, как вы знаете, случаются ошибки.
Например:

Ошибки в вашем тестовом коде (окей, тут ничем не хуже и не лучше, чем в других типах тестов)
Ошибки в вашем (или чужом) фреймворке для автоматизации (когда, функция работает не так, как вы считаете что она работает)
Ошибки в Selenium Core (редко, но случаются)
Ошибки в драйверах браузера (WebDriver) - по моему мнению в среднем по больнице тут находится наибольшее количество ошибок, которые приводят к тем неприятным сбоям в тестах, которые мы не можем объяснить
Ошибки в браузере (некоторые их них мы и хотим обнаружить своевременно, с помощью автотестов)

Прочие факторы негативно влияющие на  нестабильность UI-тестов:

UI-тесты частенько выполняют целые сценарии состоящие из нескольких проходов
(зачастую - многих десятков) через слои внутри одного теста.
Для Web тестирования мы пытаемся использовать один и тот же код тестов для разных браузеров,
в то же время слои Framework и BrowserDriver могут при это содержать различные
ошибки, требующие различных "workaround"-ов.
JS-Frontend в Web: обработчики ввода не готовы принимать данные с высокой скоростью WebDriver-a,
зачастую работают асинхронно, провоцируя ошибки из-за порядка выполнения, которые ужасно сложно
находить и отлаживать, потому что вручную все обработчики успевают отработать целиком из-за низкой скорости ввода.
Как известно, малые вероятности ошибок перемножаются, поэтому, к примеру,
если один UI тест проходит через 10 слоёв пирога 20 раз (всего 200 проходов) и
вероятность словить ошибку в каждом слое составляет всего 0,1% (один раз из 1000)
за проход, суммарная вероятность ошибки будет около 18% (0,999 в степени  200), т.е.
почти каждый пятый тест будет падать.

На практике, вероятность ошибок неодинакова в каждом слое, и наверное значительно
меньше указанной, но закон больших чисел непобедим, и его следствия знают все,
кто серьёзно занимался автоматизацией. После написания первых 2 тестов наступает
эйфория -  всё удобно, просто и быстро выполняется. После нескольких сотен ты не
понимаешь, как ты попал в этот ад, когда постоянно ломается что-то другое по
непонятным причинам. Узнаваемо?

Большое количество дополнительных слоёв - в этом различие между UI-тестами и
модульными тестами (где слоёв практически нет) и интеграционными тестами
(где слои тоже есть, но их значительно меньше).

Теперь к исходному посту про изменения верстки UI. Когда-то на митапе я услышал вопрос:
"А что вы делаете, когда у вас внезапно за ночь полностью поменялся UI интерфейс?".
Ответ простой - никогда и ни у кого UI не меняется за ночь внезапно! Изменения в UI,
как и любые другие изменения обычно планируются заранее (часто недели и месяцы до изменений).
Если вас никто не предупредил о том, что и как изменится в верстке UI - это значит,
что падающие тесты - это наименьшая из ваших проблем. Большая проблема, если хотите -
смертный грех - в том, что ваша команда дисфункциональна (т.е. неработоспособна)
по причине отсутствия коммуникаций. Работайте над починкой этой проблемы, прежде чем заниматься тестами.

------------------------------------------------------------- HTML, CSS, *Script и его варианты ------------------------------------------------------------------------------------

HTML (от англ. HyperText Markup Language — «язык гипертекстовой разметки») —
стандартизированный язык разметки документов во Всемирной паутине. Большинство
веб-страниц содержат описание разметки на языке HTML (или XHTML).
не является языком программирования; это язык разметки, используемый для
определения структуры веб-страниц, посещаемых пользователями.
Они могут иметь сложную или простую структуру, всё зависит от замысла
и желания веб-разработчика. HTML состоит из ряда элементов, которые вы
используете для того, чтобы охватить, обернуть или разметить различные
части содержимого, чтобы оно имело определенный вид или срабатывало
определенным способом. Встроенные тэги могут преобразовать часть
содержимого в гиперссылку, по которой можно перейти на другую
веб-страницу, выделить курсивом слова и так далее.

Основными частями элемента являются:
- Открывающий тег: Он состоит из названия (обозначения) элемента,
помещённого внутри угловых скобок. Данный тег служит признаком
начала элемента, с этого момента тег начинает влиять на следующее
после него содержимое.
- Закрывающий тег: выглядит как и открывающий, но содержит слэш перед
названием тега. Он служит признаком конца элемента. Пропуски закрывающих
тегов — типичная ошибка новичков, которая может приводить к неопределённым
результатам — в лучшем случае всё сработает правильно, в других страница
может вовсе не прорисоваться или прорисоваться не как ожидалось.
- Содержимое: Как видно, в нашем случае содержимым является простой текст.
- Элемент: открывающий тег + закрывающий тег + содержимое = элемент.


HTML теги:
https://html5book.ru/html-tags/
О HTML:
https://developer.mozilla.org/ru/docs/Learn/HTML/Введение_в_HTML/Начало_работы




CSS (/siːɛsɛs/ англ. Cascading Style Sheets — каскадные таблицы стилей) —
формальный язык описания внешнего вида документа, написанного с
использованием языка разметки.
Преимущественно используется как средство описания, оформления внешнего
вида веб-страниц, написанных с помощью языков разметки HTML и XHTML,
но может также применяться к любым XML-документам, например, к SVG или XUL.

О CSS:
https://iit-web-lectures.readthedocs.io/ru/latest/www/css.html
Справочник:
http://htmlbook.ru/css (свойства, правила, селекторы, классы и т.д.)
Более полное описание:
https://html5book.ru/osnovy-css/



Сценарный язык (язык сценариев, жарг. скриптовый язык; англ. scripting language)
— высокоуровневый язык сценариев (англ. script) —
кратких описаний действий, выполняемых системой. Разница между программами и
сценариями довольно размыта. Сценарий — это программа, имеющая дело с
готовыми программными компонентами.

Язык сценариев (или скриптовый) – это язык программирования, который разработан
для записи последовательностей операций («сценариев»), выполняемых пользователем
на своем компьютере. Раньше назывался языком пакетной обработки.

Сценарий или скрипт – это программа, автоматизирующая задачу.
Без скрипта пользователю бы пришлось ее выполнять вручную с помощью
интерфейса программы.

Скрипты используют для раскрутки сайта в следующих целях:

- для расширения функционала ресурса;
- для автоматического обмена ссылками;
- для выполнения работ по поисковой оптимизации;
- для сбора статистики, анализа позиций сайта и т.д.

Преимущества:

БЕЗОПАСНОСТЬ. Скриптовый язык обеспечивает программируемость без риска
дестабилизации системы. Скрипты не компилируются, а интерпретируются.
Поэтому неправильно написанная программа выведет диагностическое сообщение,
не вызывая падение системы;

НАГЛЯДНОСТЬ. Язык сценариев используется, если необходим выразительный код.
Концепция программирования в скриптовом языке может кардинально
отличаться от основной программы;

ПРОСТОТА. Код имеет собственный набор программ, поэтому одна строка может
выполнять те же операции, что и десятки строк на обычном языке. Поэтому
для написания кодов не требуется программист высокой квалификации;

КРОССБРАУЗЕРНОСТЬ. Скриптовые языки программирования ориентированы на
кроссбраузерность. Например, JavaScript может исполняться браузерами
практически под всеми современными операционными системами.

Классификация
В зависимости от быстродействия различают языки сценариев предварительно
компилируемые (например, широко используемый для создания и продвижения
сайтов Perl) и динамического разбора (command.com, sh). Первые транслируют
программу в байт-код, который затем исполняют. Языки динамического разбора
считывают инструкции из файла программы минимально необходимыми блоками,
которые исполняют, не читая, дальнейший код.

Выделяют следующие типы скриптовых языков:

универсальные: Forth, AngelScript, Perl, PHP, Python, Tcl (Tool command language), Squirrel, REBOL, Ruby, AutoIt, Lua;
встроенные в прикладные программы: VBA, UnrealScript, AutoLISP, Emacs Lisp, Game Maker Language, MQL4 script, ERM;
командные оболочки: sh, AppleScript, bash, csh, ksh, JCL, cmd.exe, command.com, REXX, Visual Basic Script;
встраиваемые: Guile, Script.NET, ActionScript, Lingo (используется в редакторе Director), Sleep, браузерные Jscript и JavaScript.

Некоторые приложения имеют встроенную возможность расширения сценариями, написанными на любом универсальном скриптовом языке, например, автоматический планировщик задач или библиотека SWIG.


Обзор скриптовых языков:
http://www.script-coding.com/Browse.html
Введение в JavaScript:
https://learn.javascript.ru/intro
Введение в TypeScript
https://canonium.com/articles/typescript-introduction

------------------------------------------------------------- DOM страницы ---------------------------------------------------------------------------------------------------------
Объектная Модель Документа (DOM) – это программный интерфейс (API)
для HTML и XML документов. DOM предоставляет структурированное
представление документа и определяет то, как эта структура может
быть доступна из программ, которые могут изменять содержимое, стиль
и структуру документа. Представление DOM состоит из структурированной
группы узлов и объектов, которые имеют свойства и методы. По существу,
DOM соединяет веб-страницу с языками описания сценариев либо языками программирования.

Веб-страница – это документ. Документ может быть представлен как в окне браузера,
так и в самом HTML-коде. В любом случае, это один и тот же документ.
DOM предоставляет другой способ представления, хранения и управления этого
документа. DOM полностью поддерживает объектно-ориентированнное представление
веб-страницы, делая возможным её изменение при помощи языка описания сценариев
наподобие JavaScript.


https://learn.javascript.ru/dom-nodes

HTML-код, который вы пишете, анализируется и преобразуется браузером впоследствии в DOM.

«Просмотр кода страницы» — это DOM? Нет. Не совсем.

Функция «просмотра кода страницы» всего лишь показывает HTML-код,
формирующий страницу. Это практически тот самый HTML-код, который вы написали в редакторе.

Этот код может выглядеть несколько иначе, если, например, вы работаете с
файлами шаблона в бэкенде, и не очень-то часто заглядываете в HTML-код,
получаемый на выходе. Или, если перед публикацией страницы на сайте ваш
HTML-код проходит через некоторый «процесс сборки». Этот код может, например,
сжиматься перед публикацией или изменяться каким-либо другим способом.

В целом, режим просмотра кода страницы — немного странная штука. На самом деле,
этот код интересен только разработчикам, но в то же время, все современные браузеры
уже имеют встроенные инструменты для разработчиков (DevTools и аналоги).
Вероятно, эта функция в современных браузерах изжила свою полезность.

А код в панели разработчика — это DOM? В общем, да!

Если вы откроете панель инструментов разработчика и увидите там что-то вроде HTML,
то вы обнаружите, что на самом деле это — визуальное представление DOM.
Ура, мы наконец-то нашли DOM!

Хммм. Но выглядит совсем как мой HTML-код

Да, это действительно так и есть. Помните, DOM формируется из написанного вами HTML-кода.
В самом упрощенном варианте визуальное представление DOM будет выглядеть точно так же,
как ваш простой HTML-код.

Но, чаще всего, всё совсем не так.

Когда визуальное представление DOM отличается от HTML-кода?

Например, если в вашем HTML-коде есть ошибки, и браузер исправил их за вас.
Допустим, у вас есть элемент <table>, и вы пропустили обязательный элемент <tbody>.
 Браузер просто добавит этот элемент <tbody> за вас. Он будет присутствовать в DOM,
 поэтому вы сможете найти его с помощью JavaScript, или стилизовать с помощью CSS,
 даже если его нет в написанном вами HTML-коде.

И тем не менее, наиболее вероятная причина в различиях между написанным
кодом и фактическим DOM в том, что…

JavaScript может динамически изменять DOM
Представьте, что в вашем HTML-коде есть пустой элемент, примерно вот такой:

<div id="container"></div>
А чуть ниже в коде есть немножко JavaScript’а:

<script>
	var container = document.getElementById("container");
	container.innerHTML = "Абра-кадабра!";
</script>
Даже если вы не знаете JavaScript, вы можете понять смысл этого
фрагмента кода. На экране вы увидите Абра-кадабра!, потому что
пустой div был заполнен новым содержимым.

Если вы откроете панель инструментов разработчика,
чтобы посмотреть на визуальное представление DOM, то увидите:

<div id="container">Абра-кадабра!</div>
Это отличается от оригинального HTML-кода или от того,
что вы увидите при просмотре исходного кода страницы.

Ajax и шаблонизация
Даже не углубляясь в эту тему, я готов утверждать, что вы понимаете то, что DOM будет
очень сильно отличаться от оригинального HTML-кода при использовании AJAX для получения
контента извне, и добавления его на страницу. Аналогичная ситуация происходит при загрузке
данных и использовании их в клиентской шаблонизации.

Попробуйте открыть Gmail и посмотреть исходный код страницы. Вы обнаружите кучу скриптов и
данных для первоначальной загрузки страницы. Совсем не похоже на интерфейс, который вы
видите на экране.

JavaScript vs. DOM
По сути, JavaScript — это язык, понимаемый браузером, с помощью которого в нем делается
множество операций. Все они происходят именно внутри DOM. Большая часть того, что вы
бы назвали операциями JavaScript, на самом деле являются частью DOM API.

Например, мы можем написать код на JavaScript, который будет следить за срабатыванием
события mouseenter на элементе. Этот элемент есть ни что иное, как узел DOM-дерева,
и к этому узлу мы с помощью DOM-свойства подключаем обработчик. Срабатывание события
происходит потому, что узел DOM-дерева распространяет его.

Ехал DOM через DOM

Я прощу прощения, если сформулировал что-то не совсем четко. Но, я надеюсь, вы всё поняли.
DOM — это то, что связывает всё воедино, именно внутри DOM всё и происходит.
JavaScript — это просто синтаксис, язык. Он может быть использован и вне браузера,
где DOM API нет и в помине. Например, обратите ваше внимание на платформу Node.js.

https://frontender.info/dom/ ++ внизу ссылочки

https://developer.mozilla.org/ru/docs/DOM/DOM_Reference/Введение

------------------------------------------------------------- Локаторы (по признаку элемента, по Xpath, по CSS) --------------------------------------------------------------------
Инструмент автоматизации веб-приложений, который работает через браузер
(Selenium или любой другой) должен иметь механизм поиска элементов на странице
приложения. Прежде чем выполнить действие с элементом – его нужно сначала найти.
Механизмы поиска элементов как раз и называются “локаторами”.

Большинство инструментов автоматизации веб-приложений (а может быть даже все)
ограничены теми средствами поиска элементов, которые предоставляют браузеры. Это
ровно те же самые функции языка JavaScript, которые используют программисты, разработчики
фронтэнда. Например, функция getElementById позволяет найти элемент по идентификатору
(значению атрибута id), функция getElementsByName используется для поиска элементов по
имени, а функция querySelector выполняет поиск при помощи языка запросов CSS Selectors.

В общем, с одной стороны, разных механизмов поиска достаточно много, с другой стороны,
сложные языки запросов (CSS Selectors и XPath) дают большую свободу в построении
локаторов. Поэтому для каждого элемента можно построить локатор, который его находит,
многими разными способами.

Как понять, какой из возможных локаторов самый лучший?

“Какой-нибудь” локатор построить легко. Например, можно записать рекордером
действие с элементом, и рекордер предложит некоторый локатор, по которому
элемент находится.

Но как известно, основные проблемы и расходы в автотестировании связаны не с созданием
тестов, а с их поддержкой и сопровождением – анализ сбоев, доработка после изменений
тестируемого приложения, улучшение самих тестов.

Поэтому самыми важными являются именно те свойства локаторов, которые облегчают
сопровождение тестов.

Исходя из этого требования, я сформулирую три критерия “хорошести” локаторов.

1. Хороший локатор должен быть устойчив к изменениям.

Это, пожалуй, самое главное. Если после небольшого изменения тестируемого приложения все
тесты приходится переделывать – это просто катастрофа.

Есть изменения, которые изначально заложены в приложение и могут определяться его настройками –
локализация, расположение блоков на странице (например, включить/отключить рекламные блоки),
“шкурки” (skins) и прочее. Локаторы нужно сразу проектировать так, чтобы они работали с
разными вариантами настроек.

Есть изменения, которые случатся в будущем. Тут заранее подготовиться на 100% нельзя,
но можно хотя бы постараться предугадать, с чем эти изменения будут связаны. Например,
если сейчас пока приложение одноязычное, но есть планы выхода на новые рынки – вероятно,
добавятся разные локализации, поэтому поиск элементов по тексту перестанет работать.
Если дизайнер скажет, что кнопки нужно сделать не прямоугольными, а закруглёнными –
поменяются стили и вёрстка кнопок, поэтому полагаться при поиске на конкретный стиль
рискованно, лучше выбрать какие-то более стабильные признаки.

Конечно, при массированном изменении тестируемого приложения противостоять изменениям
в тестах не удастся, но это вполне ожидаемо. Но незначительные изменения не
должны приводить к разрушению тестов.

2. Хороший локатор должен быть понятным.

Когда вы разрабатываете тесты, вы помните структуру страницы и можете легко представить,
что найдётся по тому или иному локатору. Но через несколько месяцев память будет уже не
так свежа, и глядя на запутанный локатор будет уже не так легко догадаться, что он ищет
или хотя бы что он должен искать.

Конечно, можно добавить комментарии и пояснения. Но лучше всё таки стремиться к выразительности
и понятности самих локаторов. Они должны быть простыми и осмысленными. Тогда читать и понимать
старые тесты будет легко и приятно.

3. Хороший локатор должен быть.

Увы, иногда хороший локатор вообще не удаётся построить. Вёрстка страницы плывёт, свойства
элементов постоянно меняются. Если пытаться написать простой локатор – он оказывается
неустойчивым, уже на следующий день он не работает. В попытках повысить устойчивость повышаем
сложность локаторов – но уже не через месяц, а через неделю становится непонятно, что они
ищут, потому что прочитать локатор длиной в две строчки вообще невозможно.

И тогда у тестировщика опускаются руки, он говорит “приложение невозможно
автоматизировать” и уходит.

Это неправильно. Нужно бороться за свои права.

Идите к разработчикам и договаривайтесь о повышении тестопригодности приложения.
Вообще-то они хорошие люди, просто они думали о своих проблемах и не думали о ваших.
Если вы не расскажете им о том, что вам нужно от приложения – как они узнают?

упражнения:
https://docs.google.com/forms/d/e/1FAIpQLSeH2tck0nP80ThQOaojA3hyVnMgmiz7sdav2wYWYsLfCOhpTw/viewform
Шпаргалка по X-path:
http://aweb34.ru/shpargalki/shpargalka-xpath
Шпаргалка по css & x-path:
https://prostoitblog.ru/kak-sostavlyat-xpath-i-css-selektoryi/

http://www.cheat-sheets.org/saved-copy/Locators_table_1_0_2.pdf

Сборник полезных ссылок:
https://automated-testing.info/t/sbornik-poleznyh-ssylok-po-lokatoram/5316
Игруха:
http://flukeout.github.io/


------------------------------------------------------------- Общий обзор возможностей Selenium и его производных ------------------------------------------------------------------
Selenium — самый мощный на сегодняшний день бесплатный инструмент для автоматизации
функционального тестирования веб-приложений. В его основу положена, максимально близкая
к настоящему, имитация действий обычного пользователя при работе в браузере.
От разработчика требуется продумать и написать сценарий действий пользователя и
проверок, а Selenium воспроизведет его в браузере. Это также означает и то, что Selenium
можно использовать не только для тестирования, но и для выполнения любой часто повторяющейся
рутинной работы для веб.

Если быть точнее, то Selenium это даже не инструмент, а целый набор инструментов,
каждый из которых предоставляет собственный функционал для автоматизации. Выбор
конкретного инструмента или нескольких из них зависит от потребностей разработчика
и характеристик проекта, который необходимо тестировать.

Про автотесты из селениума:
https://selenium2.ru/docs/introduction.html
В этом руководстве содержится введение в Selenium, описываются его особенности,
представлены общепринятые приемы использования (best practices), выработанные
сообществом пользователей Selenium. Приведено множество примеров. Кроме того,
в руководстве содержится техническая информация, касающаяся внутренней структуры Selenium.

Разные "селениумы"
https://habr.com/ru/post/152653/
Все про селениум!
https://comaqa.gitbook.io/selenium-webdriver-lectures/
https://selenium2.ru/docs/webdriver.html
~спецификация
https://automated-testing.info/t/webdriver-harakteristika-osnovnyh-komand/2290
Selenide:
https://ru.selenide.org/documentation.html


Практика:
Установка Selenium. Обучение быстрому находить и оптимизировать локаторы.